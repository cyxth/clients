"use strict";var h=(r,e,t)=>{if(!e.has(r))throw TypeError("Cannot "+t)};var p=(r,e,t)=>(h(r,e,"read from private field"),t?t.call(r):e.get(r)),n=(r,e,t)=>{if(e.has(r))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(r):e.set(r,t)},d=(r,e,t,s)=>(h(r,e,"write to private field"),s?s.call(r,t):e.set(r,t),t);var a=(r,e,t)=>(h(r,e,"access private method"),t);var i,c,o,u,l,f,g,U;import m from"node:crypto";import{sign as b}from"jsonwebtoken-esm";class k{constructor(e,t){n(this,o);n(this,l);n(this,g);n(this,i,void 0);n(this,c,void 0);d(this,i,e),d(this,c,t)}createToken(e,t){let s=b(e,p(this,c),{expiresIn:t?.duration||"2h",algorithm:"HS256",subject:p(this,i)}),y=s;return t?.pkce?{token:s,...a(this,g,U).call(this)}:y}}i=new WeakMap,c=new WeakMap,o=new WeakSet,u=function(e){return e.toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")},l=new WeakSet,f=function(e){return m.createHash("sha256").update(e).digest()},g=new WeakSet,U=function(){let e=a(this,o,u).call(this,m.randomBytes(32));return{code_challenge:a(this,o,u).call(this,a(this,l,f).call(this,e)),code_verifier:e}};export default k;
